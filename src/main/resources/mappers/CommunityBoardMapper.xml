<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.ex.CommunityBoardMapper">

	<!-- 게시판 최신순 출력 -->
	<select id="getCommunityBoardChatRegDateShowPage" resultType="hashMap">
		SELECT cb.*,
				(SELECT COUNT(*) FROM community_board_reply cbr WHERE cb.cb_no=cbr.cb_no) `reply`,
				(SELECT COUNT(*) FROM community_board_good cbg WHERE cb.cb_no=cbg.cb_no) `good`,
				m_id
		FROM community_board cb LEFT JOIN community_board_tag cbt ON cb.cb_no = cbt.cb_no
								LEFT JOIN tag t ON t.tag_no = cbt.tag_no
				,member m
		WHERE m.m_no = cb.m_no AND flag = 1 
		<include refid="classifyBoard"></include>
		<include refid="searchBoard"></include>
		GROUP BY cb_no 
		order by cb.reg_date DESC LIMIT #{Page}, #{PageSize};
	</select>
	
	<!-- 게시판 좋아요순 출력 -->
	<select id="getCommunityBoardChatGoodShowPage" resultType="hashMap">
		SELECT cb.*,
				(SELECT COUNT(*) FROM community_board_reply cbr WHERE cb.cb_no=cbr.cb_no) `reply`,
				(SELECT COUNT(*) FROM community_board_good cbg WHERE cb.cb_no=cbg.cb_no) `good`,
				m_id
		FROM community_board cb LEFT JOIN community_board_tag cbt ON cb.cb_no = cbt.cb_no
								LEFT JOIN tag t ON t.tag_no = cbt.tag_no
			,member m
		WHERE m.m_no = cb.m_no AND flag = 1
		<include refid="classifyBoard"></include>
		<include refid="searchBoard"></include>
		GROUP BY cb_no 
		order by good DESC  LIMIT #{Page}, #{PageSize};
	</select>
	
	<!-- 태그 출력 -->
	<select id="getTagCommunityBoard" resultType="hashMap">
		SELECT cbt.cb_no, t.tag_name
		FROM community_board cb, community_board_tag cbt, tag t
		WHERE cb.cb_no = cbt.cb_no AND t.tag_no = cbt.tag_no AND cb.cb_no = #{cb_no}
	</select>

	<!-- 게시판 총 갯수 -->
	<select id="getCommunityBoardTotalCount" resultType="int">
		SELECT COUNT(*) 
		FROM community_board cb LEFT JOIN community_board_tag cbt ON cb.cb_no = cbt.cb_no
								LEFT JOIN tag t ON t.tag_no = cbt.tag_no
		WHERE flag = 1 <include refid="classifyBoard"></include><include refid="searchBoard"></include> 
	</select>
	
	<!-- 게시판 상세페이지 출력 -->
	<select id="getReadCommunityBoard" resultType="hashMap">
		<choose>
			<when test="isOnlineLecture == 'yesExists'">
				SELECT cb.*, 
						(SELECT COUNT(*) FROM community_board_good cbg WHERE cb.cb_no=cbg.cb_no) `good`,
						(SELECT COUNT(*) FROM community_board_reply cbr WHERE cb.cb_no=cbr.cb_no) `cbr.conunt`,
						m_id
				FROM community_board cb, member m
				WHERE m.m_no = cb.m_no AND cb_no = #{cb_no} AND flag = 1 AND classify = #{classify}
			</when>
			<when test="isOnlineLecture != 'noExists'">
				SELECT cb.*, 
						(SELECT COUNT(*) FROM community_board_good cbg WHERE cb.cb_no=cbg.cb_no) `good`,
						(SELECT COUNT(*) FROM community_board_reply cbr WHERE cb.cb_no=cbr.cb_no) `cbr.conunt`,
						m_id
				FROM community_board cb, member m
				WHERE m.m_no = cb.m_no AND cb_no = #{cb_no} AND flag = 1 AND classify = #{classify}
			</when>
		</choose>
	</select>
	
	<!-- 게시판 상세페이지 댓글 출력 -->
	<select id="getReplyCommunityBoard" resultType="hashMap">
		SELECT cbr.*, m_id
		FROM community_board_reply cbr, member m
		WHERE cb_no = #{cb_no} AND m.m_no = cbr.m_no
	</select>
	
	<!-- 조회수 증가 -->
	<update id="addReadCommunityBoardHit">
		UPDATE community_board
		SET hit = hit + 1
		WHERE cb_no = #{cb_no}; 
	</update>
	
	<!-- 회원 좋아요 체크 -->
	<select id="getGoodCheckReadCommunityBoard" resultType="int">
		SELECT COUNT(*)
		FROM community_board_good
		WHERE cb_no = #{cb_no} AND  m_no = #{m_no};
	</select>
	
	<!-- 좋아요 추가 -->
	<insert id="addGoodReadCommunityBoard">
		INSERT INTO community_board_good(cb_no, m_no)
		VALUES(#{cb_no}, #{m_no})
	</insert>
	
	<!-- 좋아요 삭제 -->
	<delete id="subtractGoodReadCommunityBoard">
		DELETE FROM community_board_good
		WHERE cb_no = #{cb_no} AND m_no = #{m_no}
	</delete>
	
	<!--게시글 댓글 작성  -->
	<insert id="writeReplyCommunityBoard">
		INSERT INTO community_board_reply(cb_no, m_no, content, reg_date)
		VALUES(#{cb_no}, #{m_no}, #{content} ,NOW());
	</insert>
	
	<!--게시글 댓글 수정  -->
	<update id="updateReplyCommunityBoard">
		UPDATE community_board_reply
		SET content = #{content}
		WHERE m_no = #{m_no}; 
	</update>
	
	<!--게시글 댓글 삭제  -->	
	<delete id="deleteReplyCommunityBoard">
		DELETE FROM community_board_reply
		WHERE cbr_no = #{cbr_no}
	</delete>
	
	<!--게시글 작성-->
	<insert id="writeCommunityBoard">
		INSERT INTO community_board(oli_no, m_no, title, content, hit, reg_date, classify, flag)
		VALUES(0, #{m_no}, #{title}, #{content}, 0, NOW(), #{classify}, 1);
	</insert>
	
	<!--게시글 삭제  -->	
	<delete id="deleteCommunityBoard">
		DELETE FROM community_board
		WHERE cb_no = #{cb_no}
	</delete>
	
	<!--게시글 댓글 수정  -->
	<update id="updateCommunityBoard">
		UPDATE community_board
		SET title = #{title}, content = #{content}, classify = #{classify}
		WHERE cb_no = #{cb_no}; 
	</update>
	
	<!-- 수강후기 게시판 출력-->
	<select id="getReviewCommunityBoard" resultType="hashMap">
		SELECT olr.*, m_id, title, oli.img_path
		FROM online_lecture_reply olr, online_lecture_introduction oli, member m
		WHERE olr.oli_no = oli.oli_no AND olr.m_no = m.m_no <include refid="searchReview"></include> 
		ORDER BY reg_date DESC LIMIT #{Page}, #{PageSize};
	</select>
	
	<!-- 수강후기 게시판 총 갯수 -->
	<select id="getReviewCommunityBoardTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM online_lecture_reply olr, online_lecture_introduction oli, member m
		WHERE olr.oli_no = oli.oli_no AND olr.m_no = m.m_no <include refid="searchReview"></include> 
	</select>
	
	<sql id="searchBoard">
		<choose>
			<when test="searchKeyword == 'noContent' and searchTag == 'noTag'">
			</when>
			<when test="searchKeyword == 'noContent' and searchTag != 'noTag'">
				AND cb.cb_no = cbt.cb_no AND(
				<foreach collection="searchTag" index="index" item="item" separator="or">
					tag_name LIKE CONCAT('%', #{item} , '%')
				</foreach>
				)
			</when>
			<when test="searchKeyword != 'noContent' and searchTag == 'noTag'">
				AND (title LIKE  CONCAT('%', #{searchKeyword}, '%') OR content LIKE CONCAT('%', #{searchKeyword}, '%'))
			</when>
			<when test="searchKeyword != 'noContent' and searchTag != 'noTag'">
				AND (title LIKE  CONCAT('%', #{searchKeyword}, '%') OR content LIKE CONCAT('%', #{searchKeyword}, '%'))
				OR
				<foreach collection="searchTag" item="item" open="(" close=")" separator="or">
					tag_name LIKE CONCAT('%', #{item} , '%')
				</foreach>
			</when>
		</choose>
	</sql>
	<sql id="classifyBoard">
		<choose>
			<when test="checkClass == 'chat'">
				AND classify = 1
			</when>
			<when test="checkClass == 'questionAll'">
				AND (classify = 2 OR classify = 3)
			</when>
			<when test="checkClass == 'noSolution'">
				AND classify = 2 
			</when>
			<when test="checkClass == 'yesSolution'">
				AND classify = 3
			</when>
			<when test="checkClass == 'studieAll'">
				AND (classify = 4 OR classify = 5)
			</when>
			<when test="checkClass == 'offerStudie'">
				AND classify = 4 
			</when>
			<when test="checkClass == 'overOfferStudie'">
				AND classify = 5
			</when>
		</choose>
	</sql>
	<sql id="searchReview">
		<choose>
			<when test="searchKeyword == 'noContent'">
			</when>
			<when test="searchKeyword != 'noContent'">
				AND olr.content LIKE  CONCAT('%', #{searchKeyword}, '%')
			</when>
		</choose>
	</sql>
	
	<!--  게시판 해결됨, 모집종료로 변경 -->
	<update id="updateCompletedCommunityBoard">
		UPDATE community_board
		SET classify = #{classify}
		WHERE cb_no = #{cb_no}; 
	</update>
	
</mapper>