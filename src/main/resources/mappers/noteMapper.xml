<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.ex.NoteMapper">
	<!-- 노트 생성 -->
	<insert id="insertNote" useGeneratedKeys="true" keyProperty="n_no">
		INSERT INTO note(oli_no, m_no, title, content, price, classify, enable)
		VALUES(#{oli_no}, #{m_no}, #{title}, #{content}, #{price}, #{classify}, #{enable})
	</insert>
	
	<!-- 노트 삭제 -->
	<delete id="deleteNote">
		DELETE FROM note
		WHERE n_no = #{n_no}
	</delete>
	
	<!-- 노트 수정 -->
	<update id="updateNote">
		UPDATE note 
		SET title = #{title},
			content = #{content},
			price = #{price},
			enable = #{enable}
		WHERE n_no = #{n_no}
	</update>
	
	<!-- 노트 리스트 출력 -->
	<select id="getNoteList" resultType="HashMap">
		SELECT n.n_no, n.oli_no, n.m_no, n.title, n.content, n.price, n.reg_date, n.classify,
			TRUNCATE((SELECT AVG(star_rating) FROM note_reply nr WHERE nr.n_no = n.n_no),0) star_avg,
			(SELECT COUNT(*) FROM note_like nl WHERE nl.n_no = n.n_no) like_cnt,
			(SELECT COUNT(*) FROM note_reply nr WHERE nr.n_no = n.n_no) reply_cnt
		<include refid="search"></include>
		GROUP BY n_no
		
		<choose>
			<when test='order == null'>
				ORDER BY n.n_no DESC
			</when>
		
			<when test='order.equals("like")'>
				ORDER BY like_cnt DESC
			</when>
			
			<when test='order.equals("reply")'>
				ORDER BY reply_cnt DESC
			</when>
			
			<when test='order.equals("star")'>
				ORDER BY star_avg DESC
			</when>
			
			<when test='order.equals("price")'>
				ORDER BY price
			</when>
			
			<otherwise>
				ORDER BY n.n_no DESC
			</otherwise>
		</choose>
		LIMIT #{page}, #{pageSize}
	</select>
	
	<!-- 강의번호로 노트 리스트 가져오기 -->
	<select id="getNoteListByOli_no" resultType="NoteDTO">
		SELECT * FROM note
		WHERE oli_no = #{oli_no}
	</select>
	
	<!-- 노트 가져오기 -->
	<select id="getNote" resultType="NoteDTO">
		SELECT * FROM note
		WHERE n_no = #{n_no}
	</select>
	
	<!-- 노트 개수 가져오기 -->
	<select id="getNoteTotalCount" resultType="int">
		SELECT count(DISTINCT n.n_no)
		<include refid="search"></include>
	</select>
	
	<sql id="search">
		FROM note n, online_lecture_introduction oli, online_lecture_tag oltag, online_lecture_sub_type olst
		WHERE n.oli_no = oli.oli_no AND n.oli_no = oltag.oli_no AND n.oli_no = olst.oli_no AND n.enable = 1
		
		<if test="searchTitle != null">
			AND n.title LIKE '%${searchTitle}%'
		</if>
		
		<if test='main_type_abbr != null'>
			<choose>
				<when test='sub_type_abbr == null and main_type_abbr != null'>
					AND olst.sub_type_no IN (SELECT sub_type_no FROM sub_type 
											 WHERE main_type_no = (SELECT main_type_no FROM main_type 
											 					   WHERE main_type_abbr = #{main_type_abbr}))
				</when>
				
				<when test='sub_type_abbr != null'>
					AND olst.sub_type_no = (SELECT sub_type_no FROM sub_type 
								 WHERE sub_type_abbr = #{sub_type_abbr})
				</when>
			</choose>
		</if>
		
		<if test="tags != null">
			AND
			<foreach collection="tags" item="tag" separator="OR" open="(" close=")" >
				 oltag.tag_no = (SELECT tag_no FROM tag WHERE tag_abbr = #{tag})
			</foreach>
			
		</if>
		
		<if test="charge != null">
			<if test="charge.equals('free')">
				AND n.price = 0
			</if>
			<if test="charge.equals('paid')">
				AND n.price > 0
			</if>
		</if>
	</sql>
	
	<!-- 노트 강의와 회원번호로 가져오기 -->
	<select id="getNoteByOli_noM_no" resultType="NoteDTO">
		SELECT * FROM note
		WHERE oli_no = #{oli_no} AND m_no = #{m_no}
	</select>
	
	<!-- 노트 댓글 등록 -->
	<insert id="submitNoteReply">
		INSERT INTO note_reply(n_no, m_no, star_rating, content, reg_date)
		VALUES(#{n_no}, #{m_no}, #{star_rating}, #{content}, #{reg_date})
	</insert>
	
	<!-- 노트 댓글 리스트 출력 -->
	<select id="getNoteReplyList" resultType="NoteReplyDTO">
		SELECT * 
		FROM note_reply
		WHERE n_no = #{n_no}
	</select>
	
	<!-- 노트 댓글 출력 -->
	<select id="getNoteReply" resultType="NoteReplyDTO">
		SELECT * 
		FROM note_reply
		WHERE nr_no = #{nr_no}
	</select>
	
	<!-- 노트 댓글 수정 -->
	<update id="updateNoteReply">
		UPDATE note_reply
		SET
			star_rating = #{star_rating},
			content = #{content}
		WHERE nr_no = #{nr_no}
	</update>
	
	<!-- 노트 댓글 삭제 -->
	<delete id="deleteNoteReply">
		DELETE FROM note_reply
		WHERE nr_no = #{nr_no}
	</delete>
	
	<!-- 노트 좋아요 추가 -->
	<insert id="insertNoteLike">
		INSERT INTO note_like(n_no, m_no)
		VALUES(#{n_no}, #{m_no})
	</insert>
	
	<!-- 노트 좋아요 삭제 -->
	<delete id="deleteNoteLike">
		DELETE FROM note_like
		WHERE n_no = #{n_no} AND m_no = #{m_no}
	</delete>
	
	<!-- 노트 좋아요 개수 가져오기 -->
	<select id="getNoteLikeCount" resultType="int">
		SELECT COUNT(*)
		FROM note_like
		WHERE n_no = #{n_no}
	</select>
	
	<!-- 노트 좋아요 있는지 확인 -->
	<select id="existNoteLike" resultType="int">
		SELECT EXISTS(SELECT * FROM note_like WHERE n_no = #{n_no} AND m_no = #{m_no})
	</select>
	
	<!-- 노트 글 부분 -->
	
	<!-- 노트 글 등록 -->
	<insert id="insertNoteArticle" useGeneratedKeys="true" keyProperty="na_no">
		INSERT INTO note_article(n_no, `order`, title, content)
		VALUES(#{n_no}, #{order}, #{title}, #{content})
	</insert>
	
	<!-- 노트 글 삭제 -->
	<delete id="deleteNoteArticle">
		DELETE FROM note_article
		WHERE na_no = #{na_no}
	</delete>
	
	<!-- 노트 글 삭제 -->
	<!-- 
	<delete id="deleteNoteArticleByN_noAndOlv_no">
		DELETE FROM note_article
		WHERE n_no = #{n_no} AND olv_no = #{olv_no}
	</delete>
	 -->
	
	<!-- 노트 글 수정 -->
	<update id="updateNoteArticle">
		UPDATE note_article
		SET 
			title = #{title}, 
			`order` = #{order},
			content = #{content}
		WHERE na_no = #{na_no}
	</update>
	
	<!-- 노트 글 리스트 출력 -->
	<select id="getNoteArticleList" resultType="NoteArticleDTO">
		SELECT * FROM note_article
		WHERE n_no = #{n_no}
	</select>
	
	<!-- 노트 글 리스트 출력 -->
	<!-- 
	<select id="getNoteArticleListByOlv_no" resultType="NoteArticleDTO">
		SELECT * FROM note_article
		WHERE olv_no = #{olv_no}
	</select>
	 -->
	 
	<!-- 노트 글 출력 -->
	<select id="getNoteArticle" resultType="NoteArticleDTO">
		SELECT * FROM note_article
		WHERE na_no = #{na_no}
	</select>
	
	<!-- 노트 번호와 동영상 번호로 노트 글 가져오기 -->
	<select id="getNoteArticleByN_noOrder" resultType="NoteArticleDTO">
		SELECT * FROM note_article
		WHERE n_no = #{n_no} AND `order` = #{order}
	</select>
</mapper>